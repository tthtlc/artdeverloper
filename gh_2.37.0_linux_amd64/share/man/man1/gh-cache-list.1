.nh
.TH "GH-CACHE-LIST" "1" "Oct 2023" "GitHub CLI 2.37.0" "GitHub CLI manual"

.SH NAME
.PP
gh-cache-list - List Github Actions caches


.SH SYNOPSIS
.PP
\fB\fCgh cache list [flags]\fR


.SH OPTIONS
.TP
\fB\fC-q\fR, \fB\fC--jq\fR \fB\fC<expression>\fR
Filter JSON output using a jq expression

.TP
\fB\fC--json\fR \fB\fC<fields>\fR
Output JSON with the specified fields

.TP
\fB\fC-L\fR, \fB\fC--limit\fR \fB\fC<int>\fR
Maximum number of caches to fetch

.TP
\fB\fC-O\fR, \fB\fC--order\fR \fB\fC<string>\fR
Order of caches returned: {asc|desc}

.TP
\fB\fC-S\fR, \fB\fC--sort\fR \fB\fC<string>\fR
Sort fetched caches: {created_at|last_accessed_at|size_in_bytes}

.TP
\fB\fC-t\fR, \fB\fC--template\fR \fB\fC<string>\fR
Format JSON output using a Go template; see "gh help formatting"


.SH OPTIONS INHERITED FROM PARENT COMMANDS
.TP
\fB\fC-R\fR, \fB\fC--repo\fR \fB\fC<[HOST/]OWNER/REPO>\fR
Select another repository using the [HOST/]OWNER/REPO format


.SH EXAMPLE
.PP
.RS

.nf
# List caches for current repository
$ gh cache list

# List caches for specific repository
$ gh cache list --repo cli/cli

# List caches sorted by least recently accessed
$ gh cache list --sort last_accessed_at --order asc


.fi
.RE


.SH SEE ALSO
.PP
\fB\fCgh-cache(1)\fR
